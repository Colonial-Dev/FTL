-- Records the metadata (and potentially contents) of all files ever checked into FTL.
CREATE TABLE input_files (
    -- The file's ID, generated by hashing its path and data hash
    -- together.
    id TEXT PRIMARY KEY,
    -- The data hash of the file's contents.
    hash TEXT,
    -- The site-source relative path to the file's original location.
    path TEXT,
    -- The file's extension, if any. Preceding dot excluded.
    extension TEXT,
    -- The file's contents, if inline is true.
    contents TEXT,
    -- Whether or not the file's contents are stored inline.
    -- Only textual files are inlined; binary blobs (such as images)
    -- are instead copied to the flat-file cache.
    inline BOOLEAN
);

-- Records metadata about site revisions.
-- A new revision is computed for each unique set of input data.
CREATE TABLE revisions (
    -- The revision's ID, generated by XORing the hashes of
    -- all its associated input files together.
    id TEXT PRIMARY KEY,
    -- The user-assigned name, if any.
    -- Defaults to NULL.
    name TEXT UNIQUE,
    -- The timestamp at which the revision was stabilized.
    -- Defaults to and contains NULL otherwise.
    time TEXT,
    -- Whether or not the revision is "pinned."
    -- Pinned revisions and their dependencies are excluded
    -- when performing database cleanup.
    pinned BOOLEAN,
    -- Whether or not the revision is "stable."
    -- New revisions start as "unstable." Once a revision's output is 
    -- successfully evaluated, it becomes stable.
    -- 
    -- Revisions that do not successfully produce output are not stabilized,
    -- and will be discarded at next build time.
    stable BOOLEAN
);

-- Records one-to-many relationships between revisions and their files.
CREATE TABLE revision_files (
    id TEXT,
    revision TEXT,

    FOREIGN KEY (revision)
    REFERENCES revisions (id)
        ON DELETE CASCADE

    UNIQUE (id, revision)
);

-- SQLite-recommended child key index.
-- cfk = *C*hild *F*oreign *K*ey.
CREATE INDEX idx_rev_files_cfk ON revision_files(revision);

-- Records information specific to pages, i.e. Markdown documents.
CREATE TABLE pages (
    -- The page's file ID.
    id TEXT PRIMARY KEY,
    -- The page's path.
    path TEXT,
    -- The page's template.
    template TEXT,
    -- The byte offset at which the page's frontmatter ends.
    offset INTEGER,
    -- Whether or not the page is a draft.
    draft BOOLEAN,
    -- Bincode blob of the page's "attributes"  frontmatter section.
    --
    -- In addition to being stored here, the contents
    -- of this section are flattened, stringified and stored
    -- in the attributes table.
    attributes BLOB,
    -- Bincode blob of the page's "extra" frontmatter section. 
    --
    -- Unlike the attributes column, the contents of this section 
    -- are not flattened into a separate table, as the "extra" 
    -- section is intended for page-specific properties.
    extra BLOB,

    FOREIGN KEY (id)
    REFERENCES input_files (id)
        ON DELETE CASCADE
);

-- SQLite-recommended child key index.
CREATE INDEX idx_pages_cfk ON pages(id);

CREATE TABLE attributes (
    -- The ID of the page associated with the attribute.
    id TEXT,
    -- The "kind" or "key" of the attribute.
    kind TEXT,
    -- The actual value of the attribute.
    property TEXT,

    FOREIGN KEY (id)
    REFERENCES pages (id)
        ON DELETE CASCADE,

    UNIQUE(id, kind, property)
);

-- Query optimization index - without this, most queries
-- against attributes would be SCANs.
CREATE INDEX idx_attributes ON attributes(id, kind, property);
-- SQLite-recommended child key index.
CREATE INDEX idx_attributes_cfk ON attributes(id);

-- Records all known hooks (dynamic rendering triggers.)
CREATE TABLE hooks (
    -- The ID of the hook.
    id TEXT PRIMARY KEY,
    -- The paths associated with the hook, newline-separated.
    paths TEXT,
    -- The template associated with the hook.
    template TEXT,
    -- The response headers of the hook.
    -- Stored as a single string, with newlines between name and directives.
    headers TEXT,
    -- Whether or not the output of the hook should be cached in-memory.
    cache BOOLEAN,

    FOREIGN KEY (id)
    REFERENCES input_files (id)
        ON DELETE CASCADE,

    UNIQUE(id, paths)
);

-- Query optimization index.
CREATE INDEX idx_hooks ON hooks(id);
-- SQLite-recommended child key index.
CREATE INDEX idx_hooks_cfk ON hooks(id);

CREATE TABLE routes (
    id TEXT,
    revision TEXT,
    route TEXT,
    kind INTEGER,

    FOREIGN KEY (revision)
    REFERENCES revisions (id)
        ON DELETE CASCADE

    UNIQUE(id, revision, route, kind)
);

-- Query optimization index - without this, looking up
-- routes will be SCANs.
CREATE INDEX idx_routes ON routes (route);
-- SQLite-recommended child key index.
CREATE INDEX idx_routes_cfk ON routes(id, revision);

CREATE TABLE dependencies (
    relation INTEGER,
    parent TEXT,
    child TEXT,

    UNIQUE(relation, parent, child)
);

CREATE TABLE output (
    id TEXT PRIMARY KEY,
    kind INTEGER,
    content TEXT
);

-- SQLite-recommended child key index.
CREATE INDEX idx_output_cfk ON output(id);